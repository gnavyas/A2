#!/usr/bin/python

import sys,time
import easysnmp
import math
from easysnmp import Session
from easysnmp import snmp_get,snmp_walk


details_of_agent=sys.argv[1]
info_agent=details_of_agent.split(':')
adress_ip=info_agent[0]
det_agent_port=info_agent[1]
commu_agent=info_agent[2]
num_frquency_samples=float(sys.argv[2])
samples=int(sys.argv[3])
total_sam_time=1/num_frquency_samples 
my_oids=[]
get_oid=[]
push_oid=[]


for sp in range(4,len(sys.argv)):
	my_oids.append(sys.argv[sp])
my_oids.insert(0,'1.3.6.1.2.1.1.3.0')


def nprober():
	global get_oid, get_time
	
	session=Session(hostname=adress_ip,remote_port=det_agent_port,community='public',version=2,timeout=1,retries=1)
	response=session.get(my_oids)
	push_oid=[]
	

	for sn in range(1,len(response)):
		if response[sn].value!='NOSUCHOBJECT' and response[sn].value!='NOSUCHINSTANCE':
			push_oid.append(int(response[sn].value))
			
			if count!=0 and len(get_oid)>0:
				oid_gap=int(push_oid[sn-1]) - int(get_oid[sn-1])
				time_difference=round(b_time-get_time,1)
				rate = int(oid_gap / time_difference)
				if rate < 0 :
					if response[sn].snmp_type == 'COUNTER32': 
						oid_gap = oid_gap + 2**32
						print(str(b_time) +"|"+ str(oid_gap / time_difference) +"|")
					elif response[sn].snmp_type == 'COUNTER64':
						oid_gap = oid_gap + 2**64
						print(str(b_time) +"|"+ str(oid_gap / time_difference) +"|")
				else:
					print(str(b_time) +"|"+ str(rate) +"|")

	get_oid=push_oid
	get_time=b_time
	


if samples==-1:
	count=0
	get_oid=[]
	while True:
		b_time=(time.time())
		nprober()
		response_time=(time.time())
		count = count+1
		time.sleep(abs(total_sam_time - response_time + b_time))
else:
	get_oid=[]
	for count in range(0,samples+1):
		b_time=(time.time())
		nprober()
		response_time=(time.time())
		time.sleep(abs(total_sam_time - response_time + b_time))
		
